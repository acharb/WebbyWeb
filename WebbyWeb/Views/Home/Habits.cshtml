@model IEnumerable<WebbyWeb.Models.Habit>

@{
    ViewData["Title"] = "Index";
}

<div id="calendar-container">
    <header>
        <div style="text-align:right">
            <div class="btn-group dropdown">
                <div class="col-sm-9"></div>
                <a class="btn btn-simple dropdown" data-toggle="dropdown" style="text-transform:lowercase;font-size:large;">
                        <span style="text-transform:lowercase"> @ViewBag.DayTracker days in  </span> 
                        <b class="caret"></b>
                </a>
                <ul class="dropdown-menu" >
                    <li>
                        <a href="@Url.Action("UpdateDayTracker","Home", new {source = "Habits"})" style="text-transform:lowercase">update</a>
                    </li>
                    <li>
                        <a style="text-transform:lowercase">reset</a>
                    </li>
                </ul>
            </div>
        </div>
        <h2 style='font-weight:bold; text-align:center'>daily</h2>
    </header>

    <div id="calendar">
        <ul class="Times">
            <!-- calendar populated with script -->
        </ul>
    </div>
</div>

<script>
    const habitsArray = [];
    const habitTracker={
        done: 0,
        total:0
    }
</script>

@foreach (var item in Model) {
    <script>
        
        habitsArray.push({
            name:"@item.Name",
            id:"@item.ID",
            time:"@item.Time",
            description:"@item.Description",
            doneOrNot:"@item.DoneOrNot"
        });
    </script>
}


<canvas id="ChartCanvas"></canvas>

<script>
$(function(){
    format.LoadCalendar();
    events.LoadEvents();
    format.FormatPage();
    format.HideExtraTimes();
    format.LoadProgressBar();
    format.UpdateProgressBar();

    $('[data-toggle="popover"]').popover();
});

const format = 
{
    LoadCalendar()
    {
        const start = 1;
        const end = 24;
        const offset=6;

        for (let i = start;i<=end;i++){
            let hour = i+offset;
            let hourId=i+offset;
            let amOrPm = ' am';
            if(hour>=12 && hour<24){
                hour=i+offset-12;
                amOrPm=' pm';
            };
            if(hour>=24){
                hour=i+offset-24;
                hourId=hourId-24;
                amOrPm=' am';
            };
            if(hour==0){hour=12;}
            //creating times for calendar. Each time gets an ID of their military time.
            $('.Times').append('<li style="white-space: nowrap; overflow: scroll" id='+hourId+'time><div class="Time" >'+ hour +amOrPm+'</div> <div class="col-md-1"></div> </li><br>');//id is military time
        }
    },
    FormatPage()
    {
        $('#mainCard')[0].style='background:white;margin: 0px 200px 10px;';
        const add= document.createElement('div');
        add.className='main-raised';
        add.setAttribute('data-spy','affix');
        add.setAttribute('data-offset-top',"70"); // when progress bar becomes affixed
        add.style='margin: 20px 210px 0px;height: 40px;border-radius: 30px;background-color: rgb(250, 250, 250);z-index: 4;width: -webkit-fill-available';
        
        add.id='ProgressBarCard';
        $('.header')[0].style="min-height: 70px";
        $('.header')[0].append(add);
    },
    HideExtraTimes()
    {
        const startTime = 21;
        const endTime = 6
        let timeCount =startTime;

        while(timeCount<=endTime+24)
        {
            adjustedCount=timeCount;
            if (timeCount>=24)
            {
                adjustedCount = timeCount-24;
            }
            if($('#'+adjustedCount+'time')[0].children.length==2){ //if calendar element has only 2 children aka no habits
                $('#'+adjustedCount+'time')[0].style.display='none';
            }
            timeCount+=1;
        }
    },
    LoadProgressBar()
    {
        let addDiv = document.createElement('div');
        let percentComplete=Math.round((habitTracker.done/ habitTracker.total)*100);
        addDiv.className='progress-bar';

        var ctxP1 = document.getElementById("ChartCanvas").getContext('2d');
        var gradientBlue = ctxP1.createLinearGradient(0, 0, 700, 700);
        gradientBlue.addColorStop(0, 'blue');
        gradientBlue.addColorStop(1, 'white');
    
        addDiv.style='text-align:right;width:100%;border-radius:30px;text-align: center;font-style: inherit;font-size: medium;padding-top: 7px;';
        addDiv.style.background = "linear-gradient(to bottom right, purple, lightblue)";
        addDiv.id='ProgressBar';
        addDiv.setAttribute('role','progressbar');
        addDiv.setAttribute('aria-valuenow','60');
        addDiv.setAttribute('aria-valuemin','0');
        addDiv.setAttribute('aria-valuemax','100');
        addDiv.style.width=percentComplete +'%';
        addDiv.innerText=percentComplete +'%';
        $('#ProgressBarCard').append(addDiv);
    },
    UpdateProgressBar()
    {
        var newPercentComplete = Math.round((habitTracker.done/ habitTracker.total)*100);
        if(habitTracker.total==0)
            newPercentComplete=0;
        $('#ProgressBar')[0].style.width=newPercentComplete +'%';
        $('#ProgressBar')[0].innerText=newPercentComplete +'%';
    },
    FormatTime(time)
    {
        let timeFirstTwo = time.slice(0,2);
        let timeDisplay;
        if(timeFirstTwo <=11)
        {
            timeDisplay = time +' am';
            if(timeDisplay[0] == 0){
                timeDisplay = timeDisplay.slice(1,);
            }
        }
        if(timeFirstTwo >12)
        {
            timeDisplay = (timeFirstTwo-12) +time.slice(2,) + ' pm';
        }
        if(timeFirstTwo==12)
        {
            timeDisplay = time+' pm';
        }
        if(timeFirstTwo==00){
            timeDisplay = '12' +time.slice(2,) +'am';
        }

        return timeDisplay;
    }
}

const events = 
{
    LoadEvents()
    {
        let habitMap;
        let count=1;
        //cycling through each habit (each row of hidden habit table is habit)

        habitsArray.forEach(function(habit,index){
            let timeArray = (habit.time.split(',')).filter(x => x!=""); //filter out empty element
            let name = habit.name;
            let descrip= habit.description;
            let dBId=habit.id;
            let doneOrNot = habit.doneOrNot;

            timeArray.forEach(function(time,timeArrayIndex){
                habitTracker.total +=1; // add 1 to number of habits
                let timeFirstTwo = time.slice(0,2);
                if(timeFirstTwo[0]==0)
                    timeFirstTwo[0]=timeFirstTwo[1];
                let timeDisplay = format.FormatTime(time); //timeDisplay format: hh:mm eg. 09:00
                events.CreateButton(name,timeFirstTwo,timeDisplay,dBId,timeArrayIndex,descrip,doneOrNot[timeArrayIndex]);
                })
            return
        })
    },

    CreateButton(name,timeFirstTwo,timeDisplay,dBId,timeArrayIndex,description,doneOrNot)
    {
        let buttonId = dBId+'event'+timeArrayIndex; //eg. 1event3, 1 is primary key in DB, 3 is third time of habit
        let newButton = document.createElement('BUTTON');
        newButton.className='btn btn-custom';
        newButton.id = buttonId;
        //popup setup
        newButton.setAttribute('data-toggle','popover');
        newButton.setAttribute('data-trigger','hover');
        newButton.setAttribute('data-placement','bottom');
        newButton.title=timeDisplay;
        newButton.setAttribute('data-content',description);
        newButton.setAttribute('data-container','body');
        //style
        newButton.style = 'position:relative;font-size:large;white-space:normal;padding:inherit;height: 70px;width:120px; text-align:center; margin: 0px 10px 0px 10px; text-transform:lowercase;';
        newButton.style.boxShadow='0 16px 24px 2px rgba(0, 0, 0, 0.14), 0 6px 30px 5px rgba(0, 0, 0, 0.12), 0 8px 10px -5px rgba(0, 0, 0, 0.2)';
        //height according to time
        let btnHeight = this.GetButtonHeight(timeDisplay);                        
        newButton.style.top=btnHeight +'px';
        //inner Text
        newButton.innerHTML=name;
        this.AddInOrder(newButton,timeFirstTwo,btnHeight);
        if(doneOrNot==1) //habit says done in DB
        {
            newButton.value='true';
            newButton.style.backgroundColor='rgb(0, 200, 105)';
            habitTracker.done+=1;
        }
        else
        {
            newButton.value='false',
            newButton.style.backgroundColor='blue';
        }
        //when habit clicked
        $('#'+buttonId)[0].addEventListener('click',function(){events.ButtonClick(buttonId)});   
    },

    ButtonClick(buttonId)
    {
        const done = $('#'+buttonId)[0].value;  //get button value, false= unchecked, true= checked

        if(done=="true"){   //if habit done
            $('#'+buttonId)[0].value='false';
            $('#'+buttonId)[0].style.backgroundColor='blue';
            $('#'+buttonId)[0].style.opacity='1';
            Ajax.UpdateHabit(buttonId,0);
            Ajax.AdjustPointsToProgress(0);
            habitTracker.done -=1;
        }
        else{   //if habit not done
            $('#'+buttonId)[0].value='true';
            $('#'+buttonId)[0].style.backgroundColor='rgb(0, 200, 105)';
            $('#'+buttonId)[0].style.opacity='.6';
            Ajax.UpdateHabit(buttonId,1);
            Ajax.AdjustPointsToProgress(1);
            habitTracker.done +=1;}
        format.UpdateProgressBar();
    },
    
    AddInOrder(newButton,timeFirstTwo,btnHeight)
    {
        let neededSectionHeight = 0;
        let liArray = $('#'+timeFirstTwo+'time').children().filter((x,y)=>y.localName=="button");
        if(liArray.length>0)
        {
            for(let i=liArray.length-1;i>=0;i--)
            {
                let targetButton = liArray[i];
                let targetHeight = targetButton.style.top.slice(0,2);
                if(targetHeight[1]=='p')
                    targetHeight=targetHeight[0];
                if(btnHeight>=targetHeight)
                {
                    targetButton.after(newButton);
                    neededSectionHeight = targetHeight;
                    break;
                }
                else if(i==0)
                    targetButton.before(newButton);
            }
        }
        else
        {
            $('#'+timeFirstTwo+'time').append(newButton);
            neededSectionHeight=btnHeight;
        };
        //adjust section height
        let defaultHeightWithButton=100;
        let currentSectionHeight= $('#'+timeFirstTwo+'time')[0].style.height.slice(0,3); //will always be 3 digit height
        let newSectionHeight = defaultHeightWithButton + neededSectionHeight;
        if(currentSectionHeight > newSectionHeight)
            $('#'+timeFirstTwo+'time')[0].style.height=currentSectionHeight +'px';
        else
            $('#'+timeFirstTwo+'time')[0].style.height=newSectionHeight +'px';
    },
    GetButtonHeight(timeDisplay)
    {
        const minHeight = 0;
        const maxHeight = 40;
        //getting minute value, eg. "12:59 pm" gives "59"
        const colon = timeDisplay.search(":");
        const minute = timeDisplay.slice(colon+1,colon+3);
        const ret = Math.round((minute / 60)*40);
        return ret;
    }

};

const Ajax = 
{
    UpdateHabit(habitId,givenDoneOrNot)
    {
        let idTimeSplit = habitId.split('event');
        let id = idTimeSplit[0];
        let indexOfTime = idTimeSplit[1];

        $.when( this.GetHabit(id) )
        .then(function (habitContainer)
        {   
            let token = $("[name='__RequestVerificationToken']").val();
            let hold = habitContainer.doneOrNot.split('');  //changing binary string
            hold[indexOfTime]=givenDoneOrNot;
            habitContainer.doneOrNot=hold.join('');
            $.ajax({
                method:"POST",
                url:"@Url.Action("EditHabit","Habit")",
                data:{
                    Description: habitContainer.description,
                    DoneOrNot: habitContainer.doneOrNot,
                    ID:id,
                    Name: habitContainer.name,
                    ProfileName: habitContainer.profileName,
                    Time: habitContainer.time
                    },
                success: function(){console.log('progress updated')},
                error: function (ajaxOptions, thrownError)
                {
                    console.log(ajaxOptions);
                    console.log(thrownError.toString());
                },
                })
        })
    },
    GetHabit(id)
    {
        return $.ajax(
            {
                type:"GET",
                url:"/Habit/Details/"+id,
                error: function (xhr, ajaxOptions, thrownError) {
                    
                    console.log(ajaxOptions.toString());
                    console.log(thrownError.toString());
                },
                success: function(data){
                    return data;
                }
            }
        );
    },
    AdjustPointsToProgress(doneOrNot)
    {
        $.ajax(
         {
             method:"POST",
             url:"@Url.Action("AdjustPointsToProgress","Home")",
             data:{doneOrNot},
             error: function (xhr, ajaxOptions, thrownError) {
                    console.log(ajaxOptions);
                    console.log(thrownError.toString());
                },
             success: function(){console.log('progress updated')}
         }
        ) 
    }
}


/*function FormatPage()
{
    $('#mainCard')[0].style='background:white;margin: 0px 200px 10px;';
    
    const add= document.createElement('div');
    add.className='main-raised';
    add.setAttribute('data-spy','affix');
    add.setAttribute('data-offset-top',"70"); // when progress bar becomes affixed
    add.style='margin: 20px 210px 0px;height: 40px;border-radius: 30px;background-color: rgb(250, 250, 250);z-index: 4;width: -webkit-fill-available';
    
    add.id='ProgressBarCard';
    $('.header')[0].style="min-height: 70px";
    $('.header')[0].append(add);
};*/
/*
function HideExtraTimes(){
    const startTime = 21;
    const endTime = 6
    let timeCount =startTime;

    while(timeCount<=endTime+24)
    {
        adjustedCount=timeCount;
        if (timeCount>=24)
        {
            adjustedCount = timeCount-24;
        }
        if($('#'+adjustedCount+'time')[0].children.length==2){ //if calendar element has only 2 children aka no habits
            $('#'+adjustedCount+'time')[0].style.display='none';
        }
        timeCount+=1;
    }

};*/
/*
function loadProgressBar(percentComplete)
{
    var add = document.createElement('div');
    add.className='progress-bar'
    add.style='text-align:right;width:100%;background-color:blue;border-radius:30px;text-align: center;font-style: inherit;font-size: medium;padding-top: 7px;';
    add.id='ProgressBar';
    

    
    add.setAttribute('role','progressbar');
    add.setAttribute('aria-valuenow','60');
    add.setAttribute('aria-valuemin','0');
    add.setAttribute('aria-valuemax','100');
    add.innerText=percentComplete +'%';

    $('#ProgressBarCard').append(add);
};*/
/*
function loadCalendar(){        
    var start = 1;
    var end = 24;
    var offset=6;

    for (var i = start;i<=end;i++){
        var hour = i+offset;
        var hourId=i+offset;
        var amOrPm = ' am';
        if(hour>=12 && hour<24){
            hour=i+offset-12;
            amOrPm=' pm';
        };
        if(hour>=24){
            hour=i+offset-24;
            hourId=hourId-24;
            amOrPm=' am';
        };
        if(hour==0){hour=12;}
        //creating times for calendar. Each time gets an ID of their military time.
        $('.Times').append('<li style="white-space: nowrap; overflow: scroll" id='+hourId+'time><div class="Time" >'+ hour +amOrPm+'</div> <div class="col-md-1"></div> </li><br>');//id is military time
    }
}; */

//format time to be displayed, given as string
/*
function FormatTime(time)
{
    let timeFirstTwo = time.slice(0,2);
    let timeDisplay;
    if(timeFirstTwo <=11)
    {
        timeDisplay = time +' am';
        if(timeDisplay[0] == 0){
            timeDisplay = timeDisplay.slice(1,);
        }
    }
    if(timeFirstTwo >12)
    {
        timeDisplay = (timeFirstTwo-12) +time.slice(2,) + ' pm';
    }
    if(timeFirstTwo==12)
    {
        timeDisplay = time+' pm';
    }
    if(timeFirstTwo==00){
        timeDisplay = '12' +time.slice(2,) +'am';
    }

    return timeDisplay;
}*/
/*
function loadEvents (){
    var habitMap;
    var count=1;
    //cycling through each habit (each row of hidden habit table is habit)
    while (count >0){
        var entity = $('#'+count)[0];
        count++;
        if(entity == null){
            count=-1;
            break;
        }
        var timeArray = entity.children.HabitTime.innerText.split(',');
        var name=entity.children.Name.innerText;
        var entityDescription=entity.children.HabitDescr.innerText;
        var entityId = entity.id; //id as per table on page (increments from 1)
        var entityIdTable = entity.children.HabitId.innerText; // id as per database for saving update
        var details=[name,entityDescription];   //details of entity for map

        //adding each time for each habit
        for(let index =0;index<timeArray.length;index++)
            {
                if(timeArray[index]==""){
                    continue;
                };
                
                var time =timeArray[index].slice(0,2);
                //timeDisplay format: hh:mm eg. 09:00
                var timeDisplay=FormatTime(timeArray[index].slice(0,5));
                
                if(time[0]==0){
                    time = time[1];
                };

                let buttonId = entityId+'event'+index; // eg. 1event0 where 1 and 0 is from table (for buttonId)
                let buttonIdForButtonClick = entityIdTable+'event'+index; //eg. 3event0 where 3 and 0 is from database
                //create button  
                let newButton = document.createElement('BUTTON');
                        newButton.className = 'btn btn-custom';
                        newButton.id=buttonId;
                        //popup setup
                        newButton.setAttribute('data-toggle','popover');
                        newButton.setAttribute('data-trigger','hover');
                        newButton.setAttribute('data-placement','bottom');
                        newButton.title=timeDisplay;
                        newButton.setAttribute('data-content',entityDescription);
                        newButton.setAttribute('data-container','body');
                        //style
                        newButton.style = 'position:relative;font-size:large;white-space:normal;padding:inherit;height: 70px;width:120px; text-align:center; margin: 0px 10px 0px 10px; text-transform:lowercase;';
                        newButton.style.backgroundColor='blue';
                        newButton.style.boxShadow='0 16px 24px 2px rgba(0, 0, 0, 0.14), 0 6px 30px 5px rgba(0, 0, 0, 0.12), 0 8px 10px -5px rgba(0, 0, 0, 0.2)';
                        
                        //height according to time
                        var height = getButtonHeight(timeDisplay);                        
                        newButton.style.top=height +'px';

                        //hidden values
                        newButton.value='false';
                        
                        //inner Text
                        newButton.innerHTML=name;

                        //add Buttons in Order
                        var neededSectionHeight=0; //if new button adds height to section, need to adjust section height
                        var withinArray = $('#'+time+'time').children();
                        if(withinArray.length>2)//one for time label and one for empty column already there
                        {
                            for(let i =withinArray.length-1;i>=2;i--)
                            {
                                
                                var currentButton = withinArray[i];
                                var currentHeight = currentButton.style.top.slice(0,2);

                                    if(currentHeight[1]=='p'){
                                        currentHeight=currentHeight[0];
                                    };
                                if(height>=currentHeight){
                                    currentButton.after(newButton);
                                    neededSectionHeight = height;
                                    
                                    break;
                                };
                                if(i==2){
                                    currentButton.before(newButton);
                                }

                            };
                        }
                        else{
                            $('#'+time+'time').append(newButton);
                            neededSectionHeight=height;
                            };
                        
                        //adjust section height
                        var defaultHeightWithButton=100;
                        var currentSectionHeight= $('#'+time+'time')[0].style.height.slice(0,3); //will always be 3 digit height
                        var newSectionHeight = defaultHeightWithButton + neededSectionHeight;
                        if(currentSectionHeight > newSectionHeight){
                            $('#'+time+'time')[0].style.height=currentSectionHeight +'px';
                        }
                        else{
                            $('#'+time+'time')[0].style.height=newSectionHeight +'px';
                        }
                        
                    //when habit clicked
                    $('#'+buttonId)[0].addEventListener('click',function(){buttonClick(buttonId,buttonIdForButtonClick)} ); 

                    //total nubmer of habits goes up
                    window.numberOfHabits+=1;
                    };
                };   
};*/
/*
function getButtonHeight(timeDisplay)
{
    var minHeight = 0;
    var maxHeight = 40;
    
    //getting minute value, eg. "12:59 pm" gives "59"
    var colon = timeDisplay.search(":");
    var minute = timeDisplay.slice(colon+1,colon+3);
    
    
    var ret = Math.round((minute / 60)*40);
    return ret;

};*/

/*function loadHabitCompletions()
{
    var numberOfHabits = 0;
    var habitsComplete = 0;
    var count=1;
    while (count >0){
        var entity = $('#'+count)[0];
        
        if(entity == null){
            count=-1;
            break;
        };
    


        var doneOrNot = entity.children.HabitDoneOrNot.innerText;
        var timeArray =entity.children.HabitTime.innerText.split(',');
            
            for(let index =0;index<timeArray.length;index++)
            {
                if(timeArray[index]==""){
                    continue;
                };
                var id = count + 'event' + index;
                numberOfHabits+=1;
                if(doneOrNot[index]==1) //habit at time is done
                {
                    $('#'+id)[0].value=true;
                    $('#'+id)[0].style.backgroundColor='rgb(0, 200, 105)';
                    habitsComplete+=1;
                    
                }
                else //habit at time is not done
                {
                    $('#'+id)[0].value=false;
                    $('#'+id)[0].style.backgroundColor='blue';

                }
            
            }
            count++;
        }
        
        var habitPercentComplete = Math.round((habitsComplete/numberOfHabits)*100);
        $('#ProgressBar')[0].style.width=habitPercentComplete +'%';
        $('#ProgressBar')[0].innerText=habitPercentComplete +'%';
        window.habitsComplete=habitsComplete;
        window.numberOfHabits=numberOfHabits;
        return (habitPercentComplete);
    };
    
    





//gets single habit from controller
/*
function getHabit(habitId){//returns either the habit or null if not there
    var ret= $.ajax(
            {
                type:"GET",
                url:"/Habit/Details/"+habitId,
                error: function (xhr, ajaxOptions, thrownError) {
                    
                    console.log(ajaxOptions.toString());
                    console.log(thrownError.toString());
                },
                success: function(data){
                    return data;
                }
            }
        );
    return ret.success();
};*/
/*
//POST habit to DB
function postHabit(id,habitContainer,givenDoneOrNot)
{
    //var token = $("[name='__RequestVerificationToken']").val();
    /*var habitJson= JSON.stringify({
                    Description: habitContainer.description,
                    DoneOrNot: habitContainer.doneOrNot,
                    ID:id,
                    Name: habitContainer.name,
                    ProfileName: habitContainer.profileName,
                    Time: habitContainer.time
                });*/
    //console.log(habitJson);
    /*$.ajax(
            {
                method:"POST",
                url:"@Url.Action("EditHabit","Habit")",// "/Habit/EditHabit/",
                data: {
                    Description: habitContainer.description,
                    DoneOrNot: habitContainer.doneOrNot,
                    ID:id,
                    Name: habitContainer.name,
                    ProfileName: habitContainer.profileName,
                    Time: habitContainer.time},
                //contentType:"application/json; charset=utf-8;",
                error: function (data, ajaxOptions, thrownError) {
                    //console.log(data);
                    console.log(ajaxOptions.toString());
                    console.log(thrownError.toString());
                },
                success: function(){
                    console.log('updated Habit');
                    AdjustPointsToProgress(givenDoneOrNot);
                    }
                
            }
        )
        $.post("@Url.Action("EditHabit","Habit")",{
                    Description: habitContainer.description,
                    DoneOrNot: habitContainer.doneOrNot,
                    ID:id,
                    Name: habitContainer.name,
                    ProfileName: habitContainer.profileName,
                    Time: habitContainer.time});
};*/
/*
//get all habits from controller
function getAllHabits()
{
    var ret = $.ajax(
            {
                type:"GET",
                url:"/Habit/DetailData",
                success: function(data){
                    return data;
                }
            }
        );
    return ret.success();
};*/

//update Habit in DB (uses getHabit and posthabit)
/*
function updateHabit(habitId,givenDoneOrNot){
    
    let idTimeSplit = habitId.split('event');
    let id = idTimeSplit[0];
    let indexOfTime = idTimeSplit[1];
    //var promise = getHabit(id);
    $.when( getHabit(id) ).done(function (habitContainer){
        console.log(habitContainer);
        
        var hold = habitContainer.doneOrNot.split('');  //changing binary string

        hold[indexOfTime]=givenDoneOrNot;
        habitContainer.doneOrNot=hold.join('');
        habitContainer.doneOrNot[indexOfTime]=givenDoneOrNot; //binary at given index switches to what givenDoneOrNot is
        
        postHabit(id,habitContainer,givenDoneOrNot);
    });
    /*
    promise.success(function (habitContainer){
        console.log(habitContainer);
        
        var hold = habitContainer.doneOrNot.split('');  //changing binary string

        hold[indexOfTime]=givenDoneOrNot;
        habitContainer.doneOrNot=hold.join('');
        habitContainer.doneOrNot[indexOfTime]=givenDoneOrNot; //binary at given index switches to what givenDoneOrNot is
        
        postHabit(id,habitContainer,givenDoneOrNot); 
    })*/
//};
/*
function updateProgressBar()
{
    var newPercentComplete = Math.round((window.habitsComplete / window.numberOfHabits)*100);
    if(window.numberOfHabits==0){
        newPercentComplete=0;
    }
    $('#ProgressBar')[0].style.width=newPercentComplete +'%';
    $('#ProgressBar')[0].innerText=newPercentComplete +'%';
};*/
/*
//Habit button click
function buttonClick(elementId,habitId) //when habit button clicked, pulling data from Map (dictionary)
{
    
    var check = $('#'+elementId)[0].value;  //get button value, false= unchecked, true= checked

    if(check=='true'){   //if habit done

        $('#'+elementId)[0].value='false';
        $('#'+elementId)[0].style.backgroundColor='blue';
        $('#'+elementId)[0].style.opacity='1';
        updateHabit(habitId,0);
        AdjustPointsToProgress(0);
        window.habitsComplete -=1;
    };
    if(check=='false'){   //if habit not done

        $('#'+elementId)[0].value='true';
        $('#'+elementId)[0].style.backgroundColor='rgb(0, 200, 105)';
        $('#'+elementId)[0].style.opacity='.6';
        updateHabit(habitId,1);
        AdjustPointsToProgress(1);
        window.habitsComplete +=1;
    };
    updateProgressBar();
}; */
/*
function AdjustPointsToProgress(doneOrNot)
{
    $.ajax(
         {
             method:"POST",
             url:"/Home/AdjustPointsToProgress/",
             data:{doneOrNot},
             error: function (xhr, ajaxOptions, thrownError) {
                    
                    console.log(ajaxOptions.toString());
                    console.log(thrownError.toString());
                },
             success: function(){console.log('progress updated')}
         }
     )   
}*/
</script>
