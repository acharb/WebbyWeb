@model IEnumerable<WebbyWeb.Models.Habit>

@{
    ViewData["Title"] = "Index";
}

<!-- <div class="progress" style="height:40px;border-radius:15px">
    <div class="progress-bar" style="text-align:right;background-color:blue;border-radius:15px;width:30%;text-align: center;font-style: inherit;font-size: medium;padding-top: 7px;" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100">
	<span >30% </span>
	</div>
</div> -->

<div id="calendar-container">
    <header>
        <div style="text-align:right">
            <div class="btn-group dropdown">
                <div class="col-sm-9"></div>
                <button class="btn btn-simple dropdown-toggle" style="font-size:large;" data-toggle="dropdown">
                    <span style="text-transform:lowercase"> @ViewBag.DayTracker days in  </span> 
                    <b class="caret"></b>
                </a>
                <ul class="dropdown-menu" >
                    <li>
                        <a style="text-transform:lowercase">update</a>
                    </li>
                    <li>
                        <a style="text-transform:lowercase">reset</a>
                    </li>
                </ul>
            </div>
        </div>
        <h2 style='font-weight:bold; text-align:center'>daily</h2>
    </header>

    <div id="calendar">
        <ul class="Times">
            
        </ul>
    </div>
</div>


@{
    int count=0;
}
<table class="table" id='table'>
    <thead>
        <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ID)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Time)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Description)
                </th>
			    <th>
                    @Html.DisplayNameFor(model => model.DoneOrNot)
                </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        count+=1;
        <tr id= @count>
            <td id='Name'>
                
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td id='HabitId'>
                
                @Html.DisplayFor(modelItem => item.ID)
            </td>
            <td id='HabitTime'>
                @Html.DisplayFor(modelItem => item.Time)
            </td>
            <td id='HabitDescr'>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
			<td id='HabitDoneOrNot'>
                @Html.DisplayFor(modelItem => item.DoneOrNot)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.ID">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.ID">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.ID">Delete</a>
            </td>
            
        </tr>

}
    </tbody>
</table>



<script>

// ---------------------CLUES-----------------------
//button elements have id: entity # from DB + 'event'+ index of time
//time elements (list items) have id: hour (military time) + 'time'
//each button element has a value attribute telling if complete or not (true or false)


var numberOfHabits=0;
var habitsComplete=0;
loadCalendar();
loadEvents();
FormatPage();
HideExtraTimes();

loadProgressBar(window.habitsPercentComplete);
loadHabitCompletions();
updateProgressBar();

$(document).ready(function(){
    $('#table')[0].style.display='none';
});

function FormatPage()
{
    $('#mainCard')[0].style='background:white;margin: 0px 200px 10px;';
    
    var add= document.createElement('div');
    add.className='main-raised';
    add.setAttribute('data-spy','affix');
    add.setAttribute('data-offset-top',"70"); // when progress bar becomes affixed
    add.style='margin: 20px 210px 0px;height: 40px;border-radius: 30px;background-color: rgb(250, 250, 250);z-index: 4;width: -webkit-fill-available';
    
    add.id='ProgressBarCard';
    $('.header')[0].style="min-height: 70px";
    $('.header')[0].append(add);
};

function HideExtraTimes(){
    var startTime = 21;
    var endTime = 6

    var timeCount =startTime;

    while(timeCount<=endTime+24)
    {
        adjustedCount=timeCount;
        if (timeCount>=24)
        {
            adjustedCount = timeCount-24;
        }
        if($('#'+adjustedCount+'time')[0].children.length==2){ //if calendar element has only 2 children aka no habits
            $('#'+adjustedCount+'time')[0].style.display='none';
        }
        timeCount+=1;
    }

};

function loadProgressBar(percentComplete)
{
    var add = document.createElement('div');
    add.className='progress-bar'
    add.style='text-align:right;width:100%;background-color:blue;border-radius:30px;text-align: center;font-style: inherit;font-size: medium;padding-top: 7px;';
    add.id='ProgressBar';
    

    
    add.setAttribute('role','progressbar');
    add.setAttribute('aria-valuenow','60');
    add.setAttribute('aria-valuemin','0');
    add.setAttribute('aria-valuemax','100');
    add.innerText=percentComplete +'%';

    $('#ProgressBarCard').append(add);
};

function loadCalendar(){        
    var start = 1;
    var end = 24;
    var offset=6;

    for (var i = start;i<=end;i++){
        var hour = i+offset;
        var hourId=i+offset;
        var amOrPm = ' am';
        if(hour>=12 && hour<24){
            hour=i+offset-12;
            amOrPm=' pm';
        };
        if(hour>=24){
            hour=i+offset-24;
            hourId=hourId-24;
            amOrPm=' am';
        };
        if(hour==0){hour=12;}
        //creating times for calendar. Each time gets an ID of their military time.
        $('.Times').append('<li id='+hourId+'time><div class="Time" >'+ hour +amOrPm+'</div> <div class="col-md-1"></div> </li><br>');//id is military time
    }
}; 

//format time to be displayed, given as string
function FormatTime(time)
{
    var timeFirstTwo = time.slice(0,2);
    if(timeFirstTwo <=11)
    {
        var timeDisplay = time +' am';
        if(timeDisplay[0] == 0){
            timeDisplay = timeDisplay.slice(1,);
        }
    }
    if(timeFirstTwo >12)
    {
        var timeDisplay = (timeFirstTwo-12) +time.slice(2,) + ' pm';
    }
    if(timeFirstTwo==12)
    {
        var timeDisplay = time+' pm';
    }
    if(timeFirstTwo==00){
        var timeDisplay = '12' +time.slice(2,) +'am';
    }

    return timeDisplay;
}

function loadEvents (){
    var habitMap;
    var count=1;
    //cycling through each habit (each row of hidden habit table is habit)
    while (count >0){
        var entity = $('#'+count)[0];
        count++;
        if(entity == null){
            count=-1;
            break;
        }
        var timeArray = entity.children.HabitTime.innerText.split(',');
        var name=entity.children.Name.innerText;
        var entityDescription=entity.children.HabitDescr.innerText;
        var entityId = entity.id; //id as per table on page (increments from 1)
        var entityIdTable = entity.children.HabitId.innerText; // id as per database for saving update
        var details=[name,entityDescription];   //details of entity for map

        //adding each time for each habit
        for(let index =0;index<timeArray.length;index++)
            {
                if(timeArray[index]==""){
                    continue;
                };
                
                var time =timeArray[index].slice(0,2);
                //timeDisplay format: hh:mm eg. 09:00
                var timeDisplay=FormatTime(timeArray[index].slice(0,5));
                
                if(time[0]==0){
                    time = time[1];
                };

                let buttonId = entityId+'event'+index; // eg. 1event0 where 1 and 0 is from table (for buttonId)
                let buttonIdForButtonClick = entityIdTable+'event'+index; //eg. 3event0 where 3 and 0 is from database
                //create button  
                let newButton = document.createElement('BUTTON');
                        newButton.className = 'btn btn-custom';
                        newButton.id=buttonId;
                        //popup setup
                        newButton.setAttribute('data-toggle','popover');
                        newButton.setAttribute('data-trigger','hover');
                        newButton.setAttribute('data-placement','bottom');
                        newButton.title=timeDisplay;
                        newButton.setAttribute('data-content',entityDescription);
                        newButton.setAttribute('data-container','body');
                        //style
                        newButton.style = 'position:relative;font-size:large;white-space:normal;padding:inherit;height: 70px;width:120px; text-align:center; margin: 0px 10px 0px 10px; text-transform:lowercase;';
                        newButton.style.backgroundColor='blue';
                        newButton.style.boxShadow='0 16px 24px 2px rgba(0, 0, 0, 0.14), 0 6px 30px 5px rgba(0, 0, 0, 0.12), 0 8px 10px -5px rgba(0, 0, 0, 0.2)';
                        
                        //height according to time
                        var height = getButtonHeight(timeDisplay);                        
                        newButton.style.top=height +'px';

                        //hidden values
                        newButton.value='false';
                        
                        //inner Text
                        newButton.innerHTML=name;

                        //add Buttons in Order
                        var neededSectionHeight=0; //if new button adds height to section, need to adjust section height
                        var withinArray = $('#'+time+'time').children();
                        if(withinArray.length>2)//one for time label and one for empty column already there
                        {
                            for(let i =withinArray.length-1;i>=2;i--)
                            {
                                
                                var currentButton = withinArray[i];
                                var currentHeight = currentButton.style.top.slice(0,2);

                                    if(currentHeight[1]=='p'){
                                        currentHeight=currentHeight[0];
                                    };
                                if(height>=currentHeight){
                                    currentButton.after(newButton);
                                    neededSectionHeight = height;
                                    
                                    break;
                                };
                                if(i==2){
                                    currentButton.before(newButton);
                                }

                            };
                        }
                        else{
                            $('#'+time+'time').append(newButton);
                            neededSectionHeight=height;
                            };
                        
                        //adjust section height
                        var defaultHeightWithButton=100;
                        var currentSectionHeight= $('#'+time+'time')[0].style.height.slice(0,3); //will always be 3 digit height
                        var newSectionHeight = defaultHeightWithButton + neededSectionHeight;
                        if(currentSectionHeight > newSectionHeight){
                            $('#'+time+'time')[0].style.height=currentSectionHeight +'px';
                        }
                        else{
                            $('#'+time+'time')[0].style.height=newSectionHeight +'px';
                        }
                        
                    //when habit clicked
                    $('#'+buttonId)[0].addEventListener('click',function(){buttonClick(buttonId,buttonIdForButtonClick)} ); 

                    //total nubmer of habits goes up
                    window.numberOfHabits+=1;
                    };
                };   
};

function getButtonHeight(timeDisplay)
{
    var minHeight = 0;
    var maxHeight = 40;

    var minute = timeDisplay.slice(3,);
    
    
    var ret = Math.round((minute / 60)*40);
    return ret;

};

function loadHabitCompletions()
{
    var numberOfHabits = 0;
    var habitsComplete = 0;
    var count=1;
    while (count >0){
        var entity = $('#'+count)[0];
        
        if(entity == null){
            count=-1;
            break;
        };
    


        var doneOrNot = entity.children.HabitDoneOrNot.innerText;
        var timeArray =entity.children.HabitTime.innerText.split(',');
            
            for(let index =0;index<timeArray.length;index++)
            {
                if(timeArray[index]==""){
                    continue;
                };
                var id = count + 'event' + index;
                numberOfHabits+=1;
                if(doneOrNot[index]==1) //habit at time is done
                {
                    $('#'+id)[0].value=true;
                    $('#'+id)[0].style.backgroundColor='rgb(0, 200, 105)';
                    habitsComplete+=1;
                    
                }
                else //habit at time is not done
                {
                    $('#'+id)[0].value=false;
                    $('#'+id)[0].style.backgroundColor='blue';

                }
            
            }
            count++;
        }
        
        var habitPercentComplete = Math.round((habitsComplete/numberOfHabits)*100);
        $('#ProgressBar')[0].style.width=habitPercentComplete +'%';
        $('#ProgressBar')[0].innerText=habitPercentComplete +'%';
        window.habitsComplete=habitsComplete;
        window.numberOfHabits=numberOfHabits;
        return (habitPercentComplete);
    };
    
    

//gets single habit from controller
function getHabit(habitId){//returns either the habit or null if not there
    var ret= $.ajax(
            {
                type:"GET",
                url:"/Habit/Details/"+habitId,
                success: function(data){
                    return data;
                }
            }
        );
    return ret.success();
};

//POST habit to DB
function postHabit(id,habitContainer)
{
    // { var = User.Identity. }
    var token = $("[name='__RequestVerificationToken']").val();
    $.ajax(
            {
                type:"POST",
                url:"/Habit/EditHabit",
                data: {
                    ID:id,
                    Name: habitContainer.name,
                    Time: habitContainer.time,
                    Description: habitContainer.description,
                    DoneOrNot: habitContainer.doneOrNot,
                    ProfileName: habitContainer.profileName
                    
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    
                    console.log(ajaxOptions.toString());
                    console.log(thrownError.toString());
                },
                success: function(){console.log('updated Habit')}
                
            }
        )
};

//get all habits from controller
function getAllHabits()
{
    var ret = $.ajax(
            {
                type:"GET",
                url:"/Habit/DetailData",
                success: function(data){
                    return data;
                }
            }
        );
    return ret.success();
};

//update Habit in DB (uses getHabit and posthabit)
function updateHabit(habitId,givenDoneOrNot){
    
    let idTimeSplit = habitId.split('event');
    let id = idTimeSplit[0];
    let indexOfTime = idTimeSplit[1];
    var promise = getHabit(id);
    promise.success(function (habitContainer){

        var hold = habitContainer.doneOrNot.split('');  //changing binary string

        hold[indexOfTime]=givenDoneOrNot;
        habitContainer.doneOrNot=hold.join('');
        habitContainer.doneOrNot[indexOfTime]=givenDoneOrNot; //binary at given index switches to what givenDoneOrNot is

        postHabit(id,habitContainer);
    })
};

function updateProgressBar()
{
    var newPercentComplete = Math.round((window.habitsComplete / window.numberOfHabits)*100);
    if(window.numberOfHabits==0){
        newPercentComplete=0;
    }
    $('#ProgressBar')[0].style.width=newPercentComplete +'%';
    $('#ProgressBar')[0].innerText=newPercentComplete +'%';
};

//Habit button click
function buttonClick(elementId,habitId) //when habit button clicked, pulling data from Map (dictionary)
{
    
    var check = $('#'+elementId)[0].value;  //get button value, false= unchecked, true= checked

    if(check=='true'){   //if habit done

        $('#'+elementId)[0].value='false';
        $('#'+elementId)[0].style.backgroundColor='blue';
        $('#'+elementId)[0].style.opacity='1';
        updateHabit(habitId,0);
        window.habitsComplete -=1;
    };
    if(check=='false'){   //if habit not done

        $('#'+elementId)[0].value='true';
        $('#'+elementId)[0].style.backgroundColor='rgb(0, 200, 105)';
        $('#'+elementId)[0].style.opacity='.6';
        updateHabit(habitId,1);
        window.habitsComplete +=1;
    };
    updateProgressBar();
}; 

</script>
